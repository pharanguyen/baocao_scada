@page "/Dm_BcNgay"
@using DAO.Models.DanhMuc
@using DAO.Services.XuatExcel;
@using DAO.ViewModel;
@using ERPProject.Shared.Combobox;
@inherits BcNgayBase
@inject NavigationManager NavigationManager
@inject IJSRuntime IJSRuntime
<style type="text/css">
    #gdv > div.e-gridcontent > div {
        max-height: calc(100vh - 185px) !important;
    }

    .scrollable-table {
        width: 100%;
        height: 100%; /* Adjust the height as needed */
        overflow: auto; /* Enable both horizontal and vertical scrolling */
    }

    .heading-col {
        background-color: #00676B;
        color: #fff;
        text-align: center;
        border: 1px solid #333;
    }

    .row-style {
        border: 1px solid #333;
        text-align: center;
    }

    .ml {
        margin-left: 15px;
    }

    .e-rowcell.e-attr {
        position: sticky;
        top: 0;
        left: 0;
        border-right: 0.5px solid #DEE2E6;
        border-left: 0.5px solid #DEE2E6;
        /*z-index: 99999;*/
    }

    .e-columnheader:first-child .e-headercell:nth-child(2) {
        position: sticky;
        top: 0;
        left: 0;
        z-index: 1;
    }

    .e-row:nth-of-type(odd) .e-rowcell.e-attr {
        background: #F9F9F9;
    }

    .e-row:nth-of-type(even) .e-rowcell.e-attr {
        background: white;
    }

    .e-multiselect {
        margin-right: 5px;
    }
</style>

<BodyCard>
    <SfToolbar>
        <ToolbarItems>
            <ToolbarItem Type="ItemType.Button">
                <Template>
                    <SfButton CssClass="e-flat" IconCss="icon-loop3" @onclick="onTaiLai">Xem dữ liệu</SfButton>
                </Template>
            </ToolbarItem>
            <ToolbarItem Type="ItemType.Separator">
            </ToolbarItem>

            <ToolbarItem Type="ItemType.Button">
                <Template>
                    <SfButton CssClass="e-flat e-info" IconCss="icon-file-excel" @onclick="onXuatExcel">Xuất excel</SfButton>
                </Template>
            </ToolbarItem>
            <CbMultiChiNhanh @ref="CbChiNhanh" Width="300px" PopupWidth="100%" OnDataSent="ValueChangeHandler"> </CbMultiChiNhanh>
            <CbMultiTram @ref="CbTram" Width="300px" PopupWidth="100%" Data="prcTrams" OnDataSent="ValueChangeHandler1"></CbMultiTram>
            <CbMultiThongSo @ref="CbThongSo" Width="300px" PopupWidth="100%" Data1="prcThongSos"></CbMultiThongSo>



        </ToolbarItems>
        <div class="mt-2 mb-1 ml">
            <CbTime @ref="CbThoiGian" PopupWidth="100%" Width="220px" Value="Index"></CbTime>
        </div>
    </SfToolbar>

    <SfGrid DataSource="@data" AllowResizing="true" Width="100%" Height="500">

        <GridColumns>
            <GridColumn Field="TT" TextAlign="TextAlign.Center" HeaderText="TT" Width="30"></GridColumn>
            <GridColumn Field="ThoiGian" Format="dd/MM/yyyy HH:mm:ss" TextAlign="TextAlign.Center" HeaderText="Thời gian" Width="80" CustomAttributes=@(new Dictionary<string,object>() {{ "class", "e-attr" }} )></GridColumn>
            @if (ListNhatKyNgay != null)
            {
                var listTram = ListNhatKyNgay.GroupBy(x => x.TenTram).Distinct();
                var minValues = ListSum.Select(item => item.MinGiaTriThongSo).ToList();
            var maxValues = ListSum.Select(item => item.MaxGiaTriThongSo).ToList();
                @foreach (var list in listTram)
                {
                    var asx = list.OrderByDescending(x => x.Thoi_Gian).FirstOrDefault();
                    var time = new DateTime();
                    if (asx != null)
                    {
                        time = asx.Thoi_Gian;
                    }
                    var items = list.Where(x => x.Thoi_Gian == time && Id_ThongSo.Contains(x.Id_ThongSo)).ToList();
                    var max = 0;
                    var min = 0;
                    decimal avr = 0;
                    decimal sum = 0;
                    <GridColumn HeaderText="@list.Key" TextAlign="TextAlign.Center" Width="300">
                        <GridColumns>
                            @foreach (var item in items)
                            {
                                <GridColumn HeaderText="@item.TenThongSo" TextAlign="TextAlign.Center" Width="150">
                                    <Template>
                                        @{
                                            string tenTramThongSo = list.Key + item.TenThongSo;
                                            int index = ListSum.FindIndex(x => x.TenThongSo == tenTramThongSo);
                                            var cx = context as BaoCaoNgayViewModel;
                                            var gt = list.FirstOrDefault(x => x.Thoi_Gian == cx.ThoiGian && x.Id_ThongSo == item.Id_ThongSo);
                                            if (gt != null)
                                            {
                                                <div>@gt.Gia_Tri</div>

                                                decimal giaTri = decimal.Parse(@gt.Gia_Tri); //decimal.Parse(item.Gia_Tri)
                                                
                                                if (index >= 0)
                                                {
                                                    ListSum[index].TongGiaTriThongSo += giaTri;
                                                    ListSum[index].CountGiaTriThongSo ++;
                                                    ListSum[index].AvrGiaTriThongSo = Math.Round( ListSum[index].TongGiaTriThongSo / ListSum[index].CountGiaTriThongSo,1);
                                                   
                                                    if (ListSum[index].MinGiaTriThongSo > giaTri)
                                                    {
                                                        ListSum[index].MinGiaTriThongSo = giaTri;
                                                    }
                                                    if (ListSum[index].MaxGiaTriThongSo < giaTri)
                                                    {
                                                        ListSum[index].MaxGiaTriThongSo = giaTri;
                                                    }

                                                }
                                                else
                                                {
                                                    ListSum.Add(new ChiTietViewModel
                                                    {
                                                        TenThongSo = tenTramThongSo,
                                                        TongGiaTriThongSo = giaTri,
                                                        MinGiaTriThongSo = giaTri,
                                                        MaxGiaTriThongSo = giaTri,
                                                        AvrGiaTriThongSo = giaTri,
                                                    });
                                                }
                                            }
                                            else
                                            {
                                                <div>--</div>
                                            }

                                        }
                                    </Template>
                                </GridColumn>
                                @if (item.TenThongSo == "TỔNG LƯU LƯỢNG 1" || item.TenThongSo == "TỔNG LƯU LƯỢNG 2" || item.TenThongSo == "TỔNG LƯU LƯỢNG 3"
                               || item.TenThongSo == "TỔNG LƯU LƯỢNG 4 ||" || item.TenThongSo == "TỔNG LƯU LƯỢNG 5" || item.TenThongSo == "ÁP LỰC 2"
                               )
                                {
                                    <GridColumn HeaderText="Tiêu thụ" TextAlign="TextAlign.Center" Width="150">
                                        <Template>
                                            @{
                                                string tenTramTieuThu = list.Key + item.TenThongSo + "Tiêu thụ";
                                                string tenTramThongSo = list.Key + item.TenThongSo;
                                                int index = ListSum.FindIndex(x => x.TenThongSo == tenTramThongSo);
                                                var cx = context as BaoCaoNgayViewModel;
                                                var currentGt = list.FirstOrDefault(x => x.Thoi_Gian == cx.ThoiGian && x.Id_ThongSo == item.Id_ThongSo);
                                                var fiveMinutesLaterGt = list.FirstOrDefault(x => x.Thoi_Gian == cx.ThoiGian.AddMinutes(0) && x.Id_ThongSo == item.Id_ThongSo);
                                                var fiveMinutesBeforeGt = list.FirstOrDefault(x => x.Thoi_Gian == cx.ThoiGian.AddMinutes(-5) && x.Id_ThongSo == item.Id_ThongSo);

                                                if (currentGt != null && fiveMinutesLaterGt != null && fiveMinutesBeforeGt != null)
                                                {
                                                    decimal currentGtValue = decimal.Parse(currentGt.Gia_Tri);
                                                    decimal fiveMinutesLaterGtValue = decimal.Parse(fiveMinutesLaterGt.Gia_Tri);
                                                    decimal fiveMinutesBeforeGtValue = decimal.Parse(fiveMinutesBeforeGt.Gia_Tri);
                                                    decimal difference = (fiveMinutesLaterGtValue) - (fiveMinutesBeforeGtValue);


                                                    // decimal absvalue = Math.Abs(difference);
                                                    <div>@difference</div>

                                                    
                                                    if (index >= 0)
                                                    {
                                                        ListSum[index].TongGiaTriTieuThu += difference;
                                                        ListSum[index].CountGiaTriTieuThu ++;
                                                        ListSum[index].AvrGiaTriTieuThu = Math.Round(ListSum[index].TongGiaTriTieuThu / ListSum[index].CountGiaTriTieuThu, 1);

                                                        if (ListSum[index].MinGiaTriTieuThu > difference)
                                                        {
                                                            ListSum[index].MinGiaTriTieuThu = difference;
                                                        }
                                                        if (ListSum[index].MaxGiaTriTieuThu < difference)
                                                        {
                                                            ListSum[index].MaxGiaTriTieuThu = difference;
                                                        }

                                                    }
                                                    else
                                                    {
                                                        //ListSum.Add(new ChiTietViewModel
                                                        //    {
                                                        //        TenThongSo = tenTramTieuThu,
                                                        //        TongGiaTriTieuThu = difference,
                                                        //        MinGiaTriTieuThu = difference,
                                                        //        MaxGiaTriTieuThu = difference,
                                                        //        AvrGiaTriTieuThu = difference,
                                                        //    });
                                                    }
                                                }
                                                else
                                                {
                                                    <div>--</div>
                                                }
                                            }
                                        </Template>

                                    </GridColumn>

                                }
                                else
                                {
                                    string tenTramTieuThu = list.Key + item.TenThongSo + "Tiêu thụ";
                                    string tenTramThongSo = list.Key + item.TenThongSo;
                                    int index = ListSum.FindIndex(x => x.TenThongSo == tenTramThongSo);
                                    if (index >= 0)
                                    {
                                        ListSum[index].MaxGiaTriTieuThu = -1;
                                        ListSum[index].MinGiaTriTieuThu = -1;
                                        ListSum[index].AvrGiaTriTieuThu = -1;

                                    }
                                }
                            }
                            


                        </GridColumns>
                    </GridColumn>
                }
            }
        </GridColumns>
        <GridAggregates>
            <GridAggregate> 
                <GridAggregateColumns>
                    <GridAggregateColumn Field="ThoiGian" Type="AggregateType.Custom" >
                        <FooterTemplate>
                            @{
                                //var listTram = ListNhatKyNgay.GroupBy(x => x.TenTram).Distinct();
                                //foreach (var item in items)
                                //{
                                //    string tenTramThongSo = list.Key + item.TenThongSo;
                                //    int index = ListSum.FindIndex(x => x.TenThongSo == tenTramThongSo);
                                //}
                               
                                
                                <div>
                                    <table class="table">
                                        <tr>
                                        <div> TB </div>
                                            @foreach (var item in ListSum) // Use DistinctBy to get unique "Tổng" values
                                            {

                                              //  <td> @item.TongGiaTriThongSo / @item.CountGiaTriThongSo;</td>
                                                <td> @item.AvrGiaTriThongSo</td>

                                                if (@item.AvrGiaTriTieuThu != -1)
                                                {
                                                    <td>@item.AvrGiaTriTieuThu</td>
                                                }
                                                
                                                



                                            }
                                        </tr>
                                       <tr>
                                        <div> TT </div>
                                        @foreach (var item in ListSum) // Use DistinctBy to get unique "Tổng" values
                                        {
                                           
                                                <td> @item.MinGiaTriThongSo</td>

                                                if (@item.MinGiaTriTieuThu != -1)
                                                {
                                                    <td>@item.MinGiaTriTieuThu</td>
                                                }
                                                
                                                
                                           
                                        }
                                    </tr>
                                    <tr>
                                        <div> TĐ </div>
                                        @foreach (var item in ListSum) // Use DistinctBy to get unique "Tổng" values
                                        {
                                                <td>@item.MaxGiaTriThongSo</td>
                                                if (@item.MaxGiaTriTieuThu != -1)
                                                {
                                                    <td>@item.MaxGiaTriTieuThu</td>
                                                }                                              
                                                
                                            
                                        }
                                    </tr>
                                        <tr>
                                            <div> Tổng </div>
                                            @foreach (var item in ListSum) // Use DistinctBy to get unique "Tổng" values
                                            {
                                               
                                                <td>@item.TongGiaTriThongSo</td>
                                                if(@item.TongGiaTriTieuThu > 0)
                                                {
                                                    <td>@item.TongGiaTriTieuThu</td>
                                                }
                                               
                                            }
                                        </tr>

                                    </table>
                                </div>
                                ListSum = new List<ChiTietViewModel>();
                            }
                            
                        </FooterTemplate>
                    </GridAggregateColumn>
                </GridAggregateColumns>
            </GridAggregate>
        </GridAggregates>



    </SfGrid>

</BodyCard>
@code
{
    decimal minTongGiaTriThongSo = 0;
    decimal maxTongGiaTriThongSo = 0;

    public async Task onXuatExcel()
    {
        int[] Id_ChiNhanh = CbChiNhanh.Value ?? new int[0];
        int[] Id_Tram = CbTram.Value ?? new int[0];
        int[] Id_ThongSo = CbThongSo.Value ?? new int[0];

        urlFile = ExcelExportService.BaoCaoNgay(Id_ChiNhanh, Id_Tram, Id_ThongSo, CbThoiGian.Value);
        dowloadFile();
    }

    public void dowloadFile()
    {
        IJSRuntime.InvokeVoidAsync("open", urlFile);
    }
}